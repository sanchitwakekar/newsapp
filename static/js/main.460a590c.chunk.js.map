{"version":3,"sources":["Actions/Actions.js","Middleware/index.js","Reducers/NewsReducer.js","Components/NewsContainer.js","Constants/constants.js","Components/SidebarList.js","App.js","Components/storyDetails.js","Route/AppRouter.js","serviceWorker.js","index.js"],"names":["GET_NEWS","GET_NEWS_SUCCESS","GET_NEWS_FAIL","GetNewsFail","payload","type","GetNewsSaga","RootSaga","updateSearch","NewsItem","axios","get","NewsAPI","then","response","data","articles","action","call","news","put","takeEvery","initialState","NewsArticles","NewsType","NewsContainer","showStory","index","newsItem","props","history","push","formatDate","date","Date","toDateString","buildNewsItem","newsItems","map","className","onClick","title","src","urlToImage","content","publishedAt","console","log","this","length","React","Component","connect","state","NewsList","SidebarList","BuildDynamicList","newsList","newsListElement","changeNewsContainer","search_news","dispatch","App","storyDetails","location","createBrowserHistory","AppRouter","exact","path","component","Boolean","window","hostname","match","saga","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8VAAaA,EAAW,WACXC,EAAmB,mBACnBC,EAAgB,gBAUtB,SAASC,EAAYC,GACxB,MAAO,CAAEC,KAAMH,EAAeE,W,eCLxBE,G,WAQOC,GAZXC,EAAe,SAACC,GAClB,OAAOC,IAAMC,IAAIF,EAASG,SACrBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,aAExC,SAAUV,EAAYW,GAAtB,uEAEmB,OAFnB,kBAEyBC,YAAKV,EAAcS,EAAOb,SAFnD,OAGQ,OADIe,EAFZ,gBAGcC,YDFH,CAAEf,KAAMJ,EAAkBG,QCEJe,IAHjC,8BAKQ,OALR,mCAKcC,YAAIjB,EAAY,EAAD,KAL7B,qDAQO,SAAUI,IAAV,iEACH,OADG,SACGc,YAAUrB,EAAUM,GADvB,uC,6kBCfP,IAAMgB,EAAe,CACjBC,aAAc,GACdC,SAAU,I,mFCCRC,G,iNAEFC,UAAY,SAACC,EAAOC,GAChB,EAAKC,MAAMC,QAAQC,KAAK,gBAAiB,CAAEH,c,EAE/CI,WAAa,SAACC,GACV,OAAQ,IAAIC,KAAKD,GAAME,gB,EAG3BC,cAAgB,WACZ,OAAO,EAAKP,MAAMQ,UAAUC,KAAI,SAACV,EAAUD,GAAX,OAE5B,yBAAKY,UAAU,UAAUC,QAAS,kBAAM,EAAKd,UAAUC,EAAOC,KAC1D,6BACI,2BAAG,gCACEA,EAASa,SAIlB,6BACI,yBAAKF,UAAU,SAASG,IAAKd,EAASe,cAE1C,yBAAKJ,UAAU,cACVX,EAASgB,SAEd,yBAAKL,UAAU,kBACV,EAAKP,WAAWJ,EAASiB,mB,wEAStC,OAFAC,QAAQC,IAAIC,KAAKnB,OAET,oCACHmB,KAAKnB,MAAMQ,UAAUY,OAAS,EAC3BD,KAAKZ,gBAAkB,4E,GArCXc,IAAMC,YA6CnBC,mBAHf,SAAyBC,GACrB,MAAO,CAAEhB,UAAWgB,EAAQA,EAAM9B,aAAe,MAEb,KAAzB6B,CAA+B3B,GCjDjC6B,EAAW,CAAC,CACrB3B,MAAO,EACPH,SAAU,UACVZ,QAAS,0HAEb,CACIe,MAAO,EACPH,SAAU,iBACVZ,QAAS,6GAEb,CACIe,MAAO,EACPH,SAAU,QACVZ,QAAS,qIAEb,CACIe,MAAO,EACPH,SAAU,aACVZ,QAAS,mGAEb,CACIe,MAAO,EACPH,SAAU,cACVZ,QAAS,8FCjBP2C,G,kBAEF,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KAMV2B,iBAAmB,WACf,OAAO,EAAKH,MAAMI,SAASnB,KAAI,SAACoB,GAAD,OAC1B,yBAAKnB,UAAU,mBAAmBC,QAAS,kBAAM,EAAKmB,oBAAoBD,KACtEA,EAAgBlC,cAVV,EAenBmC,oBAAsB,SAACD,GACnB,EAAK7B,MAAM+B,YAAYF,IAdvB,EAAKL,MAAQ,CACTI,SAAUH,GAHC,E,sEAoBf,OACIN,KAAKQ,uB,GAvBSN,IAAMC,YAoCjBC,kBACX,MATJ,SAA4BS,GACxB,MAAO,CACHD,YAAa,SAACF,GACVG,ELhCD,CAAExD,KAAML,EAAUI,QKgCAsD,QAKdN,CAEbG,GCvBaO,G,uLAfX,OACE,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,wBACb,6BACE,kBAAC,EAAgBS,KAAKnB,QAExB,yBAAKU,UAAU,wBACb,kBAAC,EAAkBS,KAAKnB,c,GATlBqB,IAAMC,YC+BTY,G,iNA9BX/B,WAAa,SAACC,GAEV,OADAa,QAAQC,MACA,IAAIb,KAAKD,GAAME,gB,wEAMvB,OAHAa,KAAKpB,SAAWoB,KAAKnB,MAAMmC,SAASX,MAAMzB,SAAWoB,KAAKnB,MAAMmC,SAASX,MAAMzB,SAAW,GAC1FkB,QAAQC,IAAIC,KAAKpB,UAGb,yBAAKW,UAAU,mBACX,6BACI,2BAAG,gCACES,KAAKpB,SAASa,SAIvB,6BACI,yBAAKC,IAAKM,KAAKpB,SAASe,cAE5B,6BACKK,KAAKpB,SAASgB,SAEnB,6BACKI,KAAKhB,WAAWgB,KAAKpB,SAASiB,mB,GAxBxBK,IAAMC,Y,QCK3BrB,EAAUmC,cAaDC,E,iLAVP,OACI,kBAAC,IAAD,CAAQpC,QAASA,GACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,gBAAgBC,UAAWN,U,GANzCb,IAAMC,WCEVmB,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DCNN,IAAMC,EAAOC,cAEPC,EAAQC,aRTP,WAAoD,IAA/BxB,EAA8B,uDAAtB/B,EAAcL,EAAQ,uCACtD,OAAQA,EAAOZ,MACX,KAAKL,EACD,OAAO,EAAP,GACOqD,EADP,CAEI7B,SAAUP,EAAOb,UAGzB,KAAKH,EACD,OAAO,EAAP,GACOoD,EADP,CAEI9B,aAAcN,EAAOb,UAG7B,KAAKF,EACD,OAAO,EAAP,GACOmD,MQPoByB,YAAgBJ,EAAKK,MAC5DL,EAAKM,IAAIzE,GACT0E,IAASC,OAAO,kBAAC,IAAD,CAAUN,MAAOA,GAAO,kBAAC,EAAD,OAA0BO,SAASC,eAAe,SDiHpF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,MAAK,SAAA2E,GACjCA,EAAaC,kB","file":"static/js/main.460a590c.chunk.js","sourcesContent":["export const GET_NEWS = 'GET_NEWS';\r\nexport const GET_NEWS_SUCCESS = 'GET_NEWS_SUCCESS';\r\nexport const GET_NEWS_FAIL = 'GET_NEWS_FAIL';\r\n\r\nexport function GetNews(payload) {\r\n    return { type: GET_NEWS, payload }\r\n}\r\n\r\nexport function GetNewsSuccess(payload) {\r\n    return { type: GET_NEWS_SUCCESS, payload }\r\n}\r\n\r\nexport function GetNewsFail(payload) {\r\n    return { type: GET_NEWS_FAIL, payload }\r\n}\r\n\r\n","import { call, takeEvery, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { GET_NEWS, GetNewsFail, GetNewsSuccess } from '../Actions/Actions';\r\n\r\nconst updateSearch = (NewsItem) => {\r\n    return axios.get(NewsItem.NewsAPI)\r\n        .then(response => response.data.articles)\r\n};\r\nfunction* GetNewsSaga(action) {\r\n    try {\r\n        let news = yield call(updateSearch, action.payload);\r\n        yield put(GetNewsSuccess(news));\r\n    } catch (e) {\r\n        yield put(GetNewsFail(e));\r\n    }\r\n}\r\nexport function* RootSaga() {\r\n    yield takeEvery(GET_NEWS, GetNewsSaga);\r\n} ","import { GET_NEWS, GET_NEWS_SUCCESS, GET_NEWS_FAIL } from '../Actions/Actions';\r\nconst initialState = {\r\n    NewsArticles: [],\r\n    NewsType: '',\r\n}\r\nexport function NewsReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_NEWS: {\r\n            return {\r\n                ...state,\r\n                NewsType: action.payload,\r\n            }\r\n        }\r\n        case GET_NEWS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                NewsArticles: action.payload,\r\n            }\r\n        }\r\n        case GET_NEWS_FAIL: {\r\n            return {\r\n                ...state,                \r\n            }\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './NewsContainer.css';\r\n\r\nclass NewsContainer extends React.Component {\r\n\r\n    showStory = (index, newsItem) => {\r\n        this.props.history.push('/storydetails', { newsItem });\r\n    }\r\n    formatDate = (date) => {\r\n        return (new Date(date).toDateString());\r\n    }\r\n\r\n    buildNewsItem = () => {\r\n        return this.props.newsItems.map((newsItem, index) =>\r\n\r\n            <div className=\"newsBox\" onClick={() => this.showStory(index, newsItem)}>\r\n                <div>\r\n                    <p><strong>\r\n                        {newsItem.title}\r\n                    </strong>\r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    <img className=\"imgDiv\" src={newsItem.urlToImage} />\r\n                </div>\r\n                <div className=\"contentDiv\">\r\n                    {newsItem.content}\r\n                </div>\r\n                <div className=\"publishdateDiv\">\r\n                    {this.formatDate(newsItem.publishedAt)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n\r\n        return (<>\r\n            {this.props.newsItems.length > 0 ?\r\n                this.buildNewsItem() : <>Please Select the News Category</>}\r\n        </>\r\n        );\r\n    }\r\n}\r\nfunction mapStatetoProps(state) {\r\n    return { newsItems: state ? state.NewsArticles : [] }\r\n}\r\nexport default connect(mapStatetoProps, null)(NewsContainer);","export const NewsList = [{\r\n    index: 1,\r\n    NewsType: 'Bitcoin',\r\n    NewsAPI: 'https://newsapi.org/v2/everything?q=bitcoin&from=2019-10-21&sortBy=publishedAt&apiKey=d59c0dcd4718487f811d34ed3c719fc4'\r\n},\r\n{\r\n    index: 2,\r\n    NewsType: 'Business in US',\r\n    NewsAPI: 'https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=d59c0dcd4718487f811d34ed3c719fc4'\r\n},\r\n{\r\n    index: 3,\r\n    NewsType: 'Apple',\r\n    NewsAPI: 'https://newsapi.org/v2/everything?q=apple&from=2019-11-20&to=2019-11-20&sortBy=popularity&apiKey=d59c0dcd4718487f811d34ed3c719fc4'\r\n},\r\n{\r\n    index: 4,\r\n    NewsType: 'Technology',\r\n    NewsAPI: 'https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=d59c0dcd4718487f811d34ed3c719fc4'\r\n},\r\n{\r\n    index: 5,\r\n    NewsType: 'Wall Street',\r\n    NewsAPI: 'https://newsapi.org/v2/everything?domains=wsj.com&apiKey=d59c0dcd4718487f811d34ed3c719fc4'\r\n},\r\n];","import React from 'react';\r\nimport { NewsList } from '../Constants/constants';\r\nimport { connect } from \"react-redux\";\r\nimport { GetNews } from \"../Actions/Actions\";\r\n\r\nimport './SidebarList.css';\r\nclass SidebarList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newsList: NewsList,\r\n        }\r\n    }\r\n\r\n    BuildDynamicList = () => {\r\n        return this.state.newsList.map((newsListElement) =>\r\n            (<div className='ListElementStyle' onClick={() => this.changeNewsContainer(newsListElement)}>\r\n                {newsListElement.NewsType}\r\n            </div>)\r\n        )\r\n    }\r\n\r\n    changeNewsContainer = (newsListElement) => {\r\n        this.props.search_news(newsListElement);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.BuildDynamicList()\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchtoProps(dispatch) {\r\n    return {\r\n        search_news: (newsListElement) => {\r\n            dispatch(GetNews(newsListElement));\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    null, mapDispatchtoProps\r\n)(SidebarList);\r\n","import React from 'react';\nimport NewsContainer from './Components/NewsContainer';\nimport SidebarList from './Components/SidebarList';\nimport './App.css';\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"outer-grid-container\">\n          <div>\n            <SidebarList {...this.props}/>\n          </div>\n          <div className=\"inner-grid-container\">\n            <NewsContainer {...this.props}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './NewsContainer.css';\r\nimport './storyDetails.css';\r\n\r\nclass storyDetails extends React.Component {\r\n    formatDate = (date) => {\r\n        console.log();\r\n        return (new Date(date).toDateString());\r\n    }\r\n    render() {\r\n        this.newsItem = this.props.location.state.newsItem ? this.props.location.state.newsItem : {};\r\n        console.log(this.newsItem);\r\n\r\n        return (\r\n            <div className='textColorChange'>\r\n                <div>\r\n                    <p><strong>\r\n                        {this.newsItem.title}\r\n                    </strong>\r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    <img src={this.newsItem.urlToImage} />\r\n                </div>\r\n                <div >\r\n                    {this.newsItem.content}\r\n                </div>\r\n                <div >\r\n                    {this.formatDate(this.newsItem.publishedAt)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default storyDetails;","import {\r\n    Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport React from 'react';\r\nimport App from '../App';\r\nimport storyDetails from \"../Components/storyDetails\";\r\nimport { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\nclass AppRouter extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router history={history}>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={App} />\r\n                    <Route exact path=\"/storydetails\" component={storyDetails} />\r\n                </Switch>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default AppRouter;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { RootSaga } from './Middleware/index';\nimport createSagaMiddleware from 'redux-saga';\nimport { NewsReducer } from './Reducers/NewsReducer';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger'\nimport './index.css';\nimport AppRouter from './Route/AppRouter';\nimport * as serviceWorker from './serviceWorker';\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(NewsReducer, applyMiddleware(saga,logger));\nsaga.run(RootSaga);\nReactDOM.render(<Provider store={store}><AppRouter /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}